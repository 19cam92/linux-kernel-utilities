#!/bin/bash

# Requires `colors` - sourced in `functions`

whip_msg(){
	local title="$1"
	local msg="$2"
	whiptail --title "${title}" --msgbox "${msg}" --backtitle "${BACKTITLE}" 20 80
}

chk_sudoer(){
	grep 'sudo' /etc/group | grep $USER > /dev/null 2>&1
	EXIT_STAT=$?
	if [ $EXIT_STAT -ne 0 ]
	then
		error "Sudo: Not found" "The user was not found in the sudo group. Cannot continue." 1 
	fi
}

get_arch(){
	echo -en "${Cyan} \_ Determining CPU type: "
	if [ "$(getconf LONG_BIT)" == "64" ]; then arch=amd64; else arch=i386; fi
	echo -e "${Yellow}${arch}${Reg}"
}

reqexit(){
	echo -e "${Red}Response not in the offered list of options. Interpreted as an exit request. Exiting.${Reg}"
	exit 0
}

check_qt(){
	printf '\t%-24s' "QT4 or QT5"
	if pkg-config --exists Qt5Core || pkg-config --exists QtCore; then \
		echo -e "${Green}Found${Reg}"; \
		return 0; \
	else \
		echo -e "${Red}Not Found${Reg}"; \
		return 1; \
	fi
}

check_deps(){
	for dep in $(echo ${DEPENDENCIES} | tr ' ' $'\n'); do
		printf '\t%-24s' "${dep}"
		if [[ -z `dpkg -l | grep "^ii  $dep"` ]]; then
			echo -e "${Red}Not Found${Reg}"
			UPDATENEEDED=1
			TOINSTALL+=" ${dep}"
		else
			echo -e "${Green}Found${Reg}"
		fi
	done
	echo ""
	if [ $UPDATENEEDED -eq 1 ]; then
		update
	fi
}

cleanup(){
	fakeroot rm $OUTPUT -f
}

get_ubuntu_list(){
	local FILES=($(curl -s ${BASEURL} | grep "v${MINVER}" | cut -d '>' -f 7 | awk '{print substr($0,1, length($0)-4)}'))
	local FILTERED_FILES=(${FILES[@]/*$RC_FILTER*/})
	
	NUMEL=${#FILTERED_FILES[@]}
	
	for (( i=${NUMEL}; i>=0; i-- )); 
	do
		TOTAL="${TOTAL}\n${FILTERED_FILES[i]}"
		DOWN="${DOWN}\n${FILTERED_FILES[i]}"
	done
	
	echo -ne "\n"
	for ver in $(echo -e $TOTAL); do
		((COUNT++))
		printf ' %-3s Linux %-20s' "${COUNT})" "`echo ${ver##*'/'}|cut -d '>' -f 7 | sed 's/-$//'`"
		[ $((COUNT%4)) -eq 0 ] && echo -e -n '\n'
	done
	
	NUMOPTS=$COUNT
	COUNT=0
}

print_kernels_ubu(){
	if [ "`basename "$0"`" = "update_ubuntu_kernel.sh" ]; then
		echo -e "${Cyan} \_ Precompiled kernels available from ${Yellow}kernel.ubuntu.com:${Reg}"
		get_ubuntu_list
	elif [ "`basename "$0"`" = "bats-exec-test" ]; then
		get_ubuntu_list
	else
		error "Func: Print_kernel" "Logic error in parsing latest kernel. Exiting." 1 
	fi
}

get_debian_list(){
	local FILES=($(curl -s https://kernel.org | grep "Download complete tarball" | cut -d '.' -f 2- | cut -d '"' -f 1 ))
	local FILTERED_FILES=(${FILES[@]/*$RC_FILTER*/})

	for ver in ${FILTERED_FILES[@]}; do
		TOTAL="${TOTAL} https://$ver"
	done

	# Has full URL file names
	TOTAL=(${TOTAL[@]})

	for ver in ${TOTAL[@]}; do
		LIST="${LIST} `echo ${ver##*'/'}`"
	done

	ARR_LIST=(${LIST[@]})
	ARR_END=${#ARR_LIST[@]}
	NEW_ARR_END=$((${ARR_END}*2-1))

	for (( i=${NEW_ARR_END}; i>0; i=i-2 ))
	do
		iOLD=$(((i-1)/2))
		ARR_LIST[i]=" "
		ARR_LIST[i-1]=${ARR_LIST[$iOLD]}
	done
}

# Not using whiptail for Ubuntu - too many selection choices
select_kernel_deb(){
	get_debian_list
	
	# Override if using 'LATEST' else whiptail menu
	if [[ $USE_LATEST -eq 1 ]] ; then
		if [[ $1 != "quiet" ]]; then
			echo -e "\n\nScript started with ${Yellow}LATEST${Reg} option. Automating selection."
		fi
		OPTION="${ARR_LIST}"
	else
		OPTION=$(whiptail --title "Available Kernels" --backtitle "${BACKTITLE}" --menu "Select kernel arhive to download" 20 80 ${ARR_END} "${ARR_LIST[@]}" 3>&1 1>&2 2>&3)
	fi

	if [[ -n ${OPTION} ]]; then 
		TGTFILE=`printf "%s\n" "${TOTAL[@]}" | grep "${OPTION}"`; 
	else
		whip_msg  "Select Kernel Cancel" "No kernel was selected.\nExiting and cleaning up."
		exit 0
	fi
}

get_kernel_archive(){
	TEMPFILES+=( "${OUTPUT}" )
	eval wget -O "${OUTPUT}" "${TGTFILE}" 2>&1 | \
	stdbuf -o0 awk '/[.] +[0-9][0-9]?[0-9]?%/ { print substr($0,63,3) }' | \
	whiptail --title "Download Kernel Archive" --backtitle "${BACKTITLE}" --gauge "Downloading kernel archive . . ." 7 70 0
	
	err=$?
	if [ $err -ne 0 ]
	then
		error "Func: print_kernels" "Download source failure." $err
	fi
			
	SIGNurl=`sed 's/.xz/.sign/g' <<< ${TGTFILE}`
	SIGNfile=`sed 's/.xz/.xz.sign/g' <<< ${OPTION}`

	TEMPFILES+=( "${SIGNfile}" )
	wget -O "${SIGNfile}" "${SIGNurl}" 2>&1 | \
	stdbuf -o0 awk '/[.] +[0-9][0-9]?[0-9]?%/ { print substr($0,63,3) }' | \
	whiptail --title "Download Kernel Archive" --backtitle "${BACKTITLE}" --gauge "Downloading signature file . . ." 7 70 0
}

select_kernel_ubu(){
	if [[ $USE_LATEST -eq 1 ]] ; then
		echo -e "\n\nScript started with ${Yellow}LATEST${Reg} option. Automating selection to latest kernel."
		INPUT=1
	else
		echo -n -e "\n\nSelect your desired kernel: "
		read INPUT
	
		# Check for non-integer
		if ! [ $INPUT -eq $INPUT 2>/dev/null ]; then
			reqexit
		fi
		# Check for non-offerred option
		if [ $INPUT -gt $NUMOPTS ]; then
			reqexit
		fi
	fi

	# Prompt for Ubuntu Low Latency kernel
	if [ "`basename "$0"`" = "update_ubuntu_kernel.sh" ]; then
		echo ""

		# Set low latency default to no	
		read -p "Do you want the lowlatency kernel? (y/[n]):" lowlatency
		case "$lowlatency" in
		   y* | Y*) lowlatency=1 ;;
		   *) lowlatency=0 ;;
		esac

		echo ""
	fi	
}

get_precompiled_ubu_kernel(){
	get_arch
	for ver in $(echo -e $TOTAL); do
		((COUNT++))
		if [ $COUNT -eq $INPUT ]; then
			for verd in $(echo -e $DOWN); do
				((COUNTD++))
				if [ $COUNTD -eq $INPUT ]; then
					# Download Kernel
					if [ ${lowlatency} -eq 0 ]; then
						KTYPE="generic"
					else
						KTYPE="lowlatency"
					fi
					echo -e "${Cyan} \_ Locating source of ${ver} ${KTYPE} kernel packages.${Reg}"
					
					RSLT=`lynx -dump -listonly -dont-wrap-pre ${BASEURL}${ver} | grep "$1" | grep "$2" | grep "$arch" | grep -v "BUILD.LOG" | cut -d " " -f 4`
			
					if [[ -z ${RSLT} ]]; then
						whip_msg "${w_title_two}" "${w_msg_two}"
						exit
					else
						get_ubu_shared_header
						get_ubu_files ${KTYPE} header
						get_ubu_files ${KTYPE} image
					fi
				fi				
			done
		fi
	done
	echo -e "${Cyan} \_ Done${Reg}\n"
}

get_ubu_shared_header(){
	TEMPFILES+=( "${ver}" )
	eval wget $(lynx -dump -listonly -dont-wrap-pre ${BASEURL}${ver} | grep all | cut -d ' ' -f 4) 2>&1 | \
	stdbuf -o0 awk '/[.] +[0-9][0-9]?[0-9]?%/ { print substr($0,63,3) }' | \
	whiptail --title "Download Precompiled Ubuntu Kernel Packages" --backtitle "${BACKTITLE}" --gauge "Downloading ${ver} shared header . . ." 7 70 0
	err=$?
	if [ $err -ne 0 ]
	then
		error "Download package failure." "There was a problem downloading the packages. Exiting." $err
	fi
}

get_ubu_files() {
	TEMPFILES+=( "${ver}" )
	eval wget $(lynx -dump -listonly -dont-wrap-pre ${BASEURL}${ver} | grep "$1" | grep "$2" | grep "$arch" | cut -d ' ' -f 4) 2>&1 | \
	stdbuf -o0 awk '/[.] +[0-9][0-9]?[0-9]?%/ { print substr($0,63,3) }' | \
	whiptail --title "Download Precompiled Ubuntu Kernel Packages" --backtitle "${BACKTITLE}" --gauge "Downloading ${ver} ${1} ${2} . . ." 7 70 0

	err=$?
	if [ $err -ne 0 ]
	then
		error "Download package failure." "There was a problem downloading the packages. Exiting." $err
	fi
}

install_key(){
    gpg --keyserver pgp.mit.edu --recv-keys $CHK_ID --keyserver
}

######
# Spinner that watches a background process
######
spinner(){
	local pid=$1
	local delay=0.175
	local spinstr='|/-\'
	tput civis;
	local infotext=$2
	while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
		local temp=${spinstr#?}
		printf "[%c] %s" "$spinstr" "$infotext"
		local spinstr=$temp${spinstr%"$temp"}
		sleep $delay
		printf "\b\b\b\b\b\b"
		for i in $(seq 1 ${#infotext}); do
			printf "\b"
		done
	done
	printf " \b\b\b\b"
	tput cnorm;
}

function update(){
	MSG="-- Installing Dependencies --"
    center-text "${Cyan}" "${MSG}" "${Reg}"
	echo -e "\n${Yellow}[!]${Reg} The first time this script is run missing dependencies will be installed."
	echo -e "    For compiling a kernel this may take a bit of time. Feedback will be provided."
	echo
	echo -e "${PLUS} Dependencies"
	echo -e " \_Elevating permissions as necessary . . ."
	$SUDO echo -e "[%] ${Green}Elevated${Reg}\n"
	start_spinner "Updating package cache . . ."
		$SUDO apt-get update &>/dev/null 
	stop_spinner 0
	clearline
	echo -e "${PLUS} Updating package cache . . ."
	echo -e " \_${Green}Complete${Reg}\n"
	for dep in ${TOINSTALL}
	do
		start_spinner "Installing ${dep} . . ."
			$SUDO DEBIAN_FRONTEND=noninteractive apt-get -qq -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install ${dep} &>/dev/null
		stop_spinner 0
		clearline
	done
	echo -e "${PLUS} Installing dependencies . . ."
	unset TOINSTALL
	echo -e " \_${Green}Complete${Reg}\n"
	UPDATENEEDED=0
	clear
	check_deps
}

countdown(){
	local txt=$1
	local secs=$2
	while [ $secs -gt 0 ]; do
	echo -ne "$txt $secs\033[0K\r"
	sleep 1
	: $((secs--))
	done
}

sudobg() {
	$SUDO echo ""
  	$SUDO "$@" > /dev/null 2>&1 &
	BGPID=$!
}

# TRAPS
TEMPFILES=( )
cleanupfiles() {
  rm -f "${TEMPFILES[@]}"
}
trap cleanupfiles 0

check_sign(){
	start_spinner "Checking archive signature . . ."
    	CHK_SIGN=`unxz -c ${OUTPUT} | gpg --verify ${SIGNfile} - 2>&1`
    	CHK_SIGN_MISS_SIG=`grep -o 'public key not found' <<<$CHK_SIGN`
    	CHK_ID=`grep -Po -- 'RSA key ID \K\w*' <<< "$CHK_SIGN"`
	stop_spinner 0
	clearline
	echo -en "\e[1A"
	echo -e "\n${PLUS} Checking archive signature . . ."
	
    if [[ "$CHK_SIGN_MISS_SIG" == "public key not found" ]] ; then
		if [[ "${1}" == "add" ]]; then
			INSTALL_ID="y"
		else
			echo -e "\n[!] The public key for this file was not found in your PGP store."
			echo -e "[?] Do you want to install ID $CHK_ID:"
			echo -e "    [Y]es  - Install the RSA key ID for ${Yellow}$CHK_ID${Reg}"
			echo -e "    [n]o   - Do NOT install ID and EXIT"
			echo -e "    [s]kip - Do NOT install ID and CONTINUE"
		
			echo -n -e "\n\nSelect your desired action: "
			read INSTALL_ID
		fi
    
        case $INSTALL_ID in
            [Nn]*) 
                echo -e "No"
                exit 0;
                ;;
            [Ss]*) 
                echo -e "Skip"
                ;;
            *) echo -e "Yes"
                install_key
                check_sign
        esac
    else
        CHK_SIGN_VALID=`grep -Po -- 'Good signature from' <<< "$CHK_SIGN"`
        if [[ "$CHK_SIGN_VALID" == "Good signature from" ]] ; then
            echo -e " \_ Signature validated: ${Green}$CHK_ID${Reg}\n"
        else
			error "Func: chk_sign" "Signature invalid. Exiting." 1 
        fi
    fi
}

clearline(){
	echo -ne "\033[2K" ; printf "\r"
}

usage(){
	echo -e "\n TO DO: Create usage feedback"
	exit 0
}


#####
# Spinner for foreground processes
#####
function _spinner() {

    case $1 in
        start)
			local delay=0.175
			local spinstr='|/-\'
			tput civis;
			local infotext=$2
			while :
			do
				local temp=${spinstr#?}
				printf "[%c] %s" "$spinstr" "$infotext"
				local spinstr=$temp${spinstr%"$temp"}
				sleep $delay
				printf "\b\b\b\b\b\b"
				for i in $(seq 1 ${#infotext}); do
					printf "\b"
				done
			done
			printf " \b\b\b\b"
			tput cnorm;        
            ;;
        stop)
            kill $3
			wait $3 2>/dev/null
            ;;
        *)
            echo "invalid argument, try {start/stop}"
            exit 1
            ;;
    esac
}

function start_spinner() {
    # $1 : msg to display
    _spinner "start" "${1}" &
    # set global spinner pid
    _sp_pid=$!
}

function stop_spinner() {
    # $1 : command exit status
    _spinner "stop" "${1}" ${_sp_pid}
    unset _sp_pid
}

function center-text() {
	function get_width () {
    	echo "$(wc -L <<< "$1")"
	}
	function multi_space() {
		num=$1
		if [ $num -le 0 ]; then
			echo ""
			return
		fi
		v=$(printf "%-${num}s" " ")
		echo "$v"
	}

	columns="$(tput cols)"

	for line in "$@"
	do
		width=$(get_width "$line")
		left_padding=$(( (columns-width) / 2))
		if [ $left_padding -lt 0 ]; then
			left_padding=0
		fi
		spaces=$(multi_space "$left_padding")
		printf "%s%s\n" "$spaces" "$line"
	done
}